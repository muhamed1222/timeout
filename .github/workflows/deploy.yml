name: Deploy to Production

on:
  push:
    branches: [main]
  workflow_dispatch:

concurrency:
  group: deploy-production
  cancel-in-progress: false

jobs:
  # Run tests before deploying
  tests:
    name: Run Tests
    uses: ./.github/workflows/test.yml
    secrets: inherit

  # Deploy to Vercel
  deploy-vercel:
    name: Deploy to Vercel
    runs-on: ubuntu-latest
    needs: tests
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build project
        run: npm run build
      
      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          working-directory: ./
      
      - name: Notify deployment success
        if: success()
        run: |
          echo "‚úÖ Deployment successful!"
          echo "üåê Your app is live!"
      
      - name: Notify deployment failure
        if: failure()
        run: |
          echo "‚ùå Deployment failed!"
          exit 1

  # Build Docker image
  build-docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: tests
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKER_USERNAME }}/shiftmanager
          tags: |
            type=sha
            type=raw,value=latest
            type=semver,pattern={{version}}
      
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Image digest
        run: echo ${{ steps.meta.outputs.digest }}

  # Deploy to VPS (optional)
  deploy-vps:
    name: Deploy to VPS
    runs-on: ubuntu-latest
    needs: [tests, build-docker]
    if: github.ref == 'refs/heads/main' && vars.ENABLE_VPS_DEPLOY == 'true'
    
    steps:
      - name: Deploy to VPS via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            cd /opt/shiftmanager
            docker-compose pull
            docker-compose up -d
            docker-compose exec -T app npm run db:push
            echo "‚úÖ Deployed successfully!"

  # Run database migrations
  migrate-database:
    name: Run Database Migrations
    runs-on: ubuntu-latest
    needs: deploy-vercel
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run migrations
        env:
          DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
        run: npm run db:push
      
      - name: Migration status
        run: echo "‚úÖ Migrations completed"

  # Post-deployment checks
  post-deploy-checks:
    name: Post-Deployment Health Checks
    runs-on: ubuntu-latest
    needs: [deploy-vercel, migrate-database]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Wait for deployment
        run: sleep 30
      
      - name: Health check
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" ${{ secrets.APP_URL }}/api/health)
          if [ $response -eq 200 ]; then
            echo "‚úÖ Health check passed"
          else
            echo "‚ùå Health check failed with status $response"
            exit 1
          fi
      
      - name: Readiness check
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" ${{ secrets.APP_URL }}/api/health/ready)
          if [ $response -eq 200 ]; then
            echo "‚úÖ Readiness check passed"
          else
            echo "‚ùå Readiness check failed with status $response"
            exit 1
          fi
      
      - name: API smoke test
        run: |
          # Test public endpoint
          curl -f ${{ secrets.APP_URL }}/api/health || exit 1
          echo "‚úÖ API is responding"

  # Notify deployment status
  notify:
    name: Send Deployment Notification
    runs-on: ubuntu-latest
    needs: [deploy-vercel, post-deploy-checks]
    if: always() && github.ref == 'refs/heads/main'
    
    steps:
      - name: Deployment Summary
        run: |
          if [ "${{ needs.deploy-vercel.result }}" == "success" ] && [ "${{ needs.post-deploy-checks.result }}" == "success" ]; then
            echo "üöÄ Deployment completed successfully!"
            echo "üìÖ Time: $(date)"
            echo "üåê URL: ${{ secrets.APP_URL }}"
            echo "‚úÖ All health checks passed"
          else
            echo "‚ùå Deployment failed or health checks did not pass"
            exit 1
          fi




