name: Comprehensive CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '20.x'

jobs:
  # ===== Code Quality Checks =====
  
  lint:
    name: Lint & Format Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run ESLint
        run: npm run lint
      
      - name: Check code formatting
        run: npm run format:check

  type-check:
    name: TypeScript Type Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run TypeScript type check
        run: npm run type-check

  quality:
    name: Code Quality Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run quality checks
        run: npm run quality

  # ===== Testing =====
  
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run unit tests
        run: npm run test:unit
      
      - name: Generate coverage report
        run: npm run test:coverage
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage/lcov.info
          flags: unittests
          name: codecov-unit
          fail_ci_if_error: false
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
      
      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/
          retention-days: 30
      
      - name: Coverage Threshold Check
        run: |
          # Check if coverage meets thresholds (handled by vitest config)
          npm run test:coverage || (echo "Coverage thresholds not met" && exit 1)

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Setup test database
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/test
        run: |
          npm run db:push
      
      - name: Run integration tests
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/test
          NODE_ENV: test
        run: npm run test:integration
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-results
          path: tests/integration/**/*.test.ts
          retention-days: 7
        continue-on-error: true

  e2e-tests:
    name: E2E Tests (Playwright)
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Install Playwright browsers
        run: npx playwright install --with-deps
      
      - name: Setup test database
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/test
        run: |
          npm run db:push
      
      - name: Start test server
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/test
          NODE_ENV: test
          PORT: 5000
        run: |
          npm run build
          npm start &
          sleep 10
          curl http://localhost:5000/api/health || exit 1
        continue-on-error: false
      
      - name: Run E2E tests
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/test
          E2E_BASE_URL: http://localhost:5173
          NODE_ENV: test
        run: npm run test:e2e
      
      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30
      
      - name: Upload Playwright traces
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-traces
          path: test-results/
          retention-days: 7

  # ===== Build & Verification =====
  
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [lint, type-check]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build application (Vercel)
        run: npm run build:vercel
        env:
          VITE_SUPABASE_URL: https://example.supabase.co
          VITE_SUPABASE_ANON_KEY: mock-key-for-build
      
      - name: Verify build artifacts
        run: |
          if [ ! -d "dist/public" ]; then
            echo "❌ Build failed: dist/public not found"
            exit 1
          fi
          if [ ! -d "dist/server" ]; then
            echo "❌ Build failed: dist/server not found"
            exit 1
          fi
          echo "✅ Build artifacts verified"
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/
          retention-days: 7

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run npm audit
        run: npm audit --audit-level=moderate || true
      
      - name: Check for known vulnerabilities
        run: |
          vulnerabilities=$(npm audit --json | jq '.metadata.vulnerabilities')
          echo "Vulnerabilities: $vulnerabilities"
          moderate=$(echo "$vulnerabilities" | jq '.moderate // 0')
          high=$(echo "$vulnerabilities" | jq '.high // 0')
          critical=$(echo "$vulnerabilities" | jq '.critical // 0')
          
          if [ "$critical" -gt 0 ] || [ "$high" -gt 0 ]; then
            echo "❌ Found critical or high severity vulnerabilities"
            exit 1
          fi
          echo "✅ Security audit passed"

  # ===== Summary & Status =====
  
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, e2e-tests, build, security-audit]
    if: always()
    
    steps:
      - name: Check all test results
        run: |
          echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### Unit Tests: ${{ needs.unit-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "### Integration Tests: ${{ needs.integration-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "### E2E Tests: ${{ needs.e2e-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "### Build: ${{ needs.build.result }}" >> $GITHUB_STEP_SUMMARY
          echo "### Security Audit: ${{ needs.security-audit.result }}" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.unit-tests.result }}" == "failure" ]]; then
            echo "❌ Unit tests failed"
            exit 1
          fi
          if [[ "${{ needs.integration-tests.result }}" == "failure" ]]; then
            echo "❌ Integration tests failed"
            exit 1
          fi
          if [[ "${{ needs.e2e-tests.result }}" == "failure" ]]; then
            echo "❌ E2E tests failed"
            exit 1
          fi
          if [[ "${{ needs.build.result }}" == "failure" ]]; then
            echo "❌ Build failed"
            exit 1
          fi
          if [[ "${{ needs.security-audit.result }}" == "failure" ]]; then
            echo "❌ Security audit failed"
            exit 1
          fi
          
          echo "✅ All checks passed!" >> $GITHUB_STEP_SUMMARY
          echo "✅ All checks passed!"

