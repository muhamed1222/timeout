import { Context } from 'telegraf';
import type { InlineKeyboardButton } from 'telegraf/types';
import { SessionData } from '../types.js';
import { repositories } from '../../repositories/index.js';
import { logger } from '../../lib/logger.js';

type InlineKeyboard = InlineKeyboardButton[][];

export async function handleStart(ctx: Context & { session: SessionData }) {
  logger.info('Start command received', {
    userId: ctx.from?.id,
    username: ctx.from?.username,
    messageText: ctx.message && 'text' in ctx.message ? ctx.message.text : 'No text'
  });

  const startParam = ctx.message && 'text' in ctx.message ? 
    ctx.message.text.split(' ')[1] : null;
  
  // –ï—Å–ª–∏ –Ω–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ start, –Ω–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
  if (!startParam && ctx.session?.employeeId) {
    logger.info('Employee already authorized, showing main menu');
    try {
      await showMainMenu(ctx);
    } catch (error: any) {
      logger.error('Error showing main menu in start handler', {
        error: error.message || String(error),
        code: error.code,
        stack: error.stack
      });
      // –ü–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      try {
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /status');
      } catch (replyError) {
        logger.error('Failed to send error message', { error: replyError });
      }
    }
    return;
  }
  
  if (!startParam) {
    logger.info('No start parameter provided, showing access denied message');
    return ctx.reply(`
‚ùå *–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω*

–≠—Ç–æ—Ç –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—é –æ—Ç –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏.

–î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏ –ø–æ–ª—É—á–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ.
    `, { parse_mode: 'Markdown' });
  }

  if (!ctx.from?.id) {
    logger.error('No user ID in context');
    return ctx.reply(`
‚ùå *–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏*

–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram.
–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
    `, { parse_mode: 'Markdown' });
  }

  try {
    logger.info('Processing invite code', { code: startParam });
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–≤–∞–π—Ç-–∫–æ–¥
    const invite = await repositories.invite.findByCode(startParam);
    
    if (!invite) {
      logger.warn('Invite not found', { code: startParam });
      return ctx.reply(`
‚ùå *–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è*

–ö–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω.
–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∑–∞ –Ω–æ–≤—ã–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ–º.
      `, { parse_mode: 'Markdown' });
    }

    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å —ç—Ç–∏–º Telegram ID
    const currentTelegramId = ctx.from.id.toString();
    logger.info('Checking for existing employee with Telegram ID', { telegramId: currentTelegramId });
    let existingEmployee = await repositories.employee.findByTelegramId(currentTelegramId);
    logger.info('Found existing employee', existingEmployee ? {
      id: existingEmployee.id,
      company_id: existingEmployee.company_id,
      full_name: existingEmployee.full_name
    } : { found: false });
    
    if (existingEmployee) {
      logger.info('Found existing employee with Telegram ID', { telegramId: currentTelegramId });
      
      // –ï—Å–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ –¥–∞–Ω–Ω—ã–µ –∏ –ø–µ—Ä–µ–Ω–æ—Å–∏–º –≤ –Ω–æ–≤—É—é –∫–æ–º–ø–∞–Ω–∏—é
      const needsCompanyTransfer = existingEmployee.company_id !== invite.company_id;
      logger.info('Company transfer needed', { needsTransfer: needsCompanyTransfer, fromCompany: existingEmployee.company_id, toCompany: invite.company_id });
      
      const updated = await repositories.employee.update(existingEmployee.id, {
        company_id: invite.company_id,
        full_name: invite.full_name || existingEmployee.full_name,
        position: invite.position || existingEmployee.position,
        telegram_user_id: currentTelegramId,
        status: 'active'
      });
      logger.info('Updated employee', updated ? {
        id: updated.id,
        company_id: updated.company_id,
        full_name: updated.full_name
      } : { updated: false });

      // –ü–æ–º–µ—á–∞–µ–º –∏–Ω–≤–∞–π—Ç –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π
      logger.info('Marking invite as used', { inviteCode: invite.code, employeeId: existingEmployee.id });
      await repositories.invite.useInvite(invite.code, existingEmployee.id);
      logger.info('Invite marked as used successfully');

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–µ—Å—Å–∏—é –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–ª–æ—É
      if (!ctx.session) ctx.session = {} as any;
      ctx.session.employeeId = (updated || existingEmployee).id;
      ctx.session.companyId = invite.company_id;

      const company = await repositories.company.findById(invite.company_id);
      await ctx.reply(`
üéâ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!*

üë§ *–°–æ—Ç—Ä—É–¥–Ω–∏–∫:* ${(updated || existingEmployee).full_name}
üè¢ *–ö–æ–º–ø–∞–Ω–∏—è:* ${company?.name || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
${(updated || existingEmployee).position ? `üíº *–î–æ–ª–∂–Ω–æ—Å—Ç—å:* ${(updated || existingEmployee).position}` : ''}

‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ —Å–∏—Å—Ç–µ–º–µ —É—á—ë—Ç–∞ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.

*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/status - –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–º–µ–Ω—ã
/help - –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–º–µ–Ω–æ–π.
      `, { parse_mode: 'Markdown' });

      await showMainMenu(ctx);
      return;
    }

    if (invite.used_at) {
      logger.warn('Invite already used', { code: startParam });
      
      // –ï—Å–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–≤–æ–π –∂–µ –∏–Ω–≤–∞–π—Ç - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
      if (ctx.session?.employeeId && invite.used_by_employee === ctx.session.employeeId) {
        logger.info('Employee using their own invite, showing main menu');
        await showMainMenu(ctx);
        return;
      }
      
      return ctx.reply(`
‚ùå *–ö–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω*

–≠—Ç–æ—Ç –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è —É–∂–µ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω.
–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∑–∞ –Ω–æ–≤—ã–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ–º.
      `, { parse_mode: 'Markdown' });
    }

    logger.info('Creating/updating employee for Telegram ID', { telegramId: ctx.from.id });
    // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    let employee = await repositories.employee.findByTelegramId(ctx.from.id.toString());
    
    if (!employee) {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
      employee = await repositories.employee.create({
        company_id: invite.company_id,
        full_name: invite.full_name || '–°–æ—Ç—Ä—É–¥–Ω–∏–∫',
        position: invite.position,
        telegram_user_id: ctx.from.id.toString(),
        status: 'active'
      });
      logger.info('Created new employee', { employeeId: employee.id });
    } else {
      // –ü–µ—Ä–µ–Ω–æ—Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –≤ –∫–æ–º–ø–∞–Ω–∏—é –∏–∑ –∏–Ω–≤–∞–π—Ç–∞, –µ—Å–ª–∏ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è
      const needsCompanyTransfer = employee.company_id !== invite.company_id;
      const updated = await repositories.employee.update(employee.id, {
        company_id: needsCompanyTransfer ? invite.company_id : employee.company_id,
        full_name: invite.full_name || employee.full_name,
        position: invite.position || employee.position,
        telegram_user_id: ctx.from.id.toString(),
        status: 'active'
      });
      logger.info(
        needsCompanyTransfer ? 'Transferred employee to company' : 'Updated existing employee',
        { employeeId: updated?.id, companyId: invite.company_id }
      );
      employee = updated || employee;
    }

    // –û—Ç–º–µ—á–∞–µ–º –∏–Ω–≤–∞–π—Ç –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π
    await repositories.invite.useInvite(startParam, employee!.id);
    logger.info('Marked invite as used', { code: startParam });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–µ—Å—Å–∏—é
    if (!ctx.session) {
      ctx.session = {};
    }
    ctx.session.employeeId = employee!.id;
    ctx.session.companyId = employee!.company_id;

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø–∞–Ω–∏–∏
    const company = await repositories.company.findById(employee!.company_id);

    logger.info('Sending welcome message to user', { userId: ctx.from.id });
    await ctx.reply(`
üéâ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!*

üë§ *–°–æ—Ç—Ä—É–¥–Ω–∏–∫:* ${employee.full_name}
üè¢ *–ö–æ–º–ø–∞–Ω–∏—è:* ${company?.name || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
${employee.position ? `üíº *–î–æ–ª–∂–Ω–æ—Å—Ç—å:* ${employee.position}` : ''}

‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ —Å–∏—Å—Ç–µ–º–µ —É—á—ë—Ç–∞ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.

*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/status - –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–º–µ–Ω—ã
/help - –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–º–µ–Ω–æ–π.
    `, { parse_mode: 'Markdown' });

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await showMainMenu(ctx);

  } catch (error: unknown) {
    logger.error('Error in start handler', error);
    ctx.reply(`
‚ùå *–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è*

–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ —Å–∏—Å—Ç–µ–º–µ.
–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.

–û—à–∏–±–∫–∞: ${(error as any)?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}
    `, { parse_mode: 'Markdown' });
  }
}

async function showMainMenu(ctx: Context & { session: SessionData }) {
  if (!ctx.session) {
    logger.error('No session available in showMainMenu');
    return;
  }
  
  const employeeId = ctx.session.employeeId;
  if (!employeeId) {
    logger.error('No employeeId in session');
    return;
  }

  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å–º–µ–Ω—É
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    const shifts = await repositories.shift.findByEmployeeId(employeeId);
    const todayShift = shifts.find(s => {
      const shiftDate = new Date(s.planned_start_at);
      shiftDate.setHours(0, 0, 0, 0);
      return shiftDate.getTime() === today.getTime();
    });

    let keyboard: InlineKeyboard = [];

    // –ï—Å–ª–∏ —Å–º–µ–Ω—ã –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–π —Å–º–µ–Ω—ã
    if (!todayShift) {
      keyboard = [
        [
          { text: '‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å —Å–º–µ–Ω—É', callback_data: 'start_shift' }
        ]
      ];
      
      try {
        await ctx.reply(`
üìä *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–º–µ–Ω–æ–π*

üìÖ –ù–∞ —Å–µ–≥–æ–¥–Ω—è —Å–º–µ–Ω–∞ –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å —Å–º–µ–Ω—É –≤—Ä—É—á–Ω—É—é.

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
        `, {
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: keyboard
          }
        });
        logger.info('Main menu message sent (no shift)');
      } catch (error: any) {
        logger.error('Error sending main menu message (no shift)', {
          error: error.message || String(error),
          code: error.code
        });
        // –ü–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        try {
          await ctx.reply('üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–º–µ–Ω–æ–π\n\nüìÖ –ù–∞ —Å–µ–≥–æ–¥–Ω—è —Å–º–µ–Ω–∞ –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–º–µ–Ω—É.', {
            reply_markup: {
              inline_keyboard: keyboard
            }
          });
        } catch (retryError) {
          logger.error('Failed to send fallback message', { error: retryError });
        }
      }
      return;
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ —Å–º–µ–Ω—ã
    const breakIntervals = await repositories.shift.findBreakIntervalsByShiftId(todayShift.id);
    
    const activeBreak = breakIntervals.find(bi => !bi.end_at);

    if (todayShift.status === 'planned') {
      keyboard = [
        [
          { text: '‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å —Å–º–µ–Ω—É', callback_data: 'start_shift' }
        ]
      ];
    } else if (todayShift.status === 'active') {
      if (activeBreak) {
        keyboard = [
          [{ text: '‚òëÔ∏è –í–µ—Ä–Ω—É–ª—Å—è', callback_data: 'end_break' }]
        ];
      } else {
        keyboard = [
          [
            { text: 'üçΩ –ù–∞—á–∞—Ç—å –ø–µ—Ä–µ—Ä—ã–≤', callback_data: 'start_break' },
            { text: 'üïî –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–º–µ–Ω—É', callback_data: 'end_shift' }
          ]
        ];
      }
    }

    if (keyboard.length > 0) {
      try {
        await ctx.reply(`
üìä *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–º–µ–Ω–æ–π*

‚è∞ *–ü–ª–∞–Ω–∏—Ä—É–µ–º–æ–µ –≤—Ä–µ–º—è:* ${new Date(todayShift.planned_start_at).toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' })} - ${new Date(todayShift.planned_end_at).toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' })}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
        `, {
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: keyboard
          }
        });
        logger.info('Main menu message sent', { shiftStatus: todayShift.status });
      } catch (error: any) {
        logger.error('Error sending main menu message', {
          error: error.message || String(error),
          code: error.code,
          shiftStatus: todayShift.status
        });
        // –ü–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ Markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        try {
          await ctx.reply(
            `üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–º–µ–Ω–æ–π\n\n‚è∞ –ü–ª–∞–Ω–∏—Ä—É–µ–º–æ–µ –≤—Ä–µ–º—è: ${new Date(todayShift.planned_start_at).toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' })} - ${new Date(todayShift.planned_end_at).toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' })}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`,
            {
              reply_markup: {
                inline_keyboard: keyboard
              }
            }
          );
        } catch (retryError) {
          logger.error('Failed to send fallback message', { error: retryError });
        }
      }
    }

  } catch (error) {
    const err = error as any;
    logger.error('Error showing main menu', {
      error: err.message || String(error),
      code: err.code,
      stack: err.stack
    });
    
    // –ù–µ –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–≤–µ—á–∞—Ç—å –ø—Ä–∏ —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–∫–∞—Ö
    if (err.code === 'ERR_SSL_DECRYPTION_FAILED_OR_BAD_RECORD_MAC' ||
        err.code === 'ECONNRESET' ||
        err.code === 'ETIMEDOUT') {
      logger.warn('Network error in showMainMenu', { code: err.code });
      return;
    }
    
    try {
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /status');
    } catch (replyError) {
      logger.error('Failed to send error message', { error: replyError });
    }
  }
}
