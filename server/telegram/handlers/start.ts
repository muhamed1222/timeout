import { Context } from 'telegraf';
import { SessionData } from '../types';
import { storage } from '../../storage';

export async function handleStart(ctx: Context & { session: SessionData }) {
  const startParam = ctx.message && 'text' in ctx.message ? 
    ctx.message.text.split(' ')[1] : null;
  
  if (!startParam) {
    return ctx.reply(`
‚ùå *–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω*

–≠—Ç–æ—Ç –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—é –æ—Ç –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏.

–î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏ –ø–æ–ª—É—á–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ.
    `, { parse_mode: 'Markdown' });
  }

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–≤–∞–π—Ç-–∫–æ–¥
    const invite = await storage.getEmployeeInviteByCode(startParam);
    
    if (!invite) {
      return ctx.reply(`
‚ùå *–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è*

–ö–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω.
–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∑–∞ –Ω–æ–≤—ã–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ–º.
      `, { parse_mode: 'Markdown' });
    }

    if (invite.used_at) {
      return ctx.reply(`
‚ùå *–ö–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω*

–≠—Ç–æ—Ç –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è —É–∂–µ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω.
–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∑–∞ –Ω–æ–≤—ã–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ–º.
      `, { parse_mode: 'Markdown' });
    }

    // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    let employee = await storage.getEmployeeByTelegramId(ctx.from!.id.toString());
    
    if (!employee) {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
      employee = await storage.createEmployee({
        company_id: invite.company_id,
        full_name: invite.full_name || '–°–æ—Ç—Ä—É–¥–Ω–∏–∫',
        position: invite.position,
        telegram_user_id: ctx.from!.id.toString(),
        status: 'active'
      });
    } else {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
      employee = await storage.updateEmployee(employee.id, {
        telegram_user_id: ctx.from!.id.toString(),
        status: 'active'
      });
    }

    // –û—Ç–º–µ—á–∞–µ–º –∏–Ω–≤–∞–π—Ç –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π
    await storage.useEmployeeInvite(startParam, employee.id);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–µ—Å—Å–∏—é
    ctx.session.employeeId = employee.id;
    ctx.session.companyId = employee.company_id;

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø–∞–Ω–∏–∏
    const company = await storage.getCompany(employee.company_id);

    await ctx.reply(`
üéâ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!*

üë§ *–°–æ—Ç—Ä—É–¥–Ω–∏–∫:* ${employee.full_name}
üè¢ *–ö–æ–º–ø–∞–Ω–∏—è:* ${company?.name || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
${employee.position ? `üíº *–î–æ–ª–∂–Ω–æ—Å—Ç—å:* ${employee.position}` : ''}

‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ —Å–∏—Å—Ç–µ–º–µ —É—á—ë—Ç–∞ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.

*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/status - –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–º–µ–Ω—ã
/help - –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–º–µ–Ω–æ–π.
    `, { parse_mode: 'Markdown' });

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await showMainMenu(ctx);

  } catch (error) {
    console.error('Error in start handler:', error);
    ctx.reply(`
‚ùå *–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è*

–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ —Å–∏—Å—Ç–µ–º–µ.
–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
    `, { parse_mode: 'Markdown' });
  }
}

async function showMainMenu(ctx: Context & { session: SessionData }) {
  const employeeId = ctx.session.employeeId;
  if (!employeeId) return;

  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å–º–µ–Ω—É
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    const shifts = await storage.getShiftsByEmployee(employeeId);
    const todayShift = shifts.find(s => {
      const shiftDate = new Date(s.planned_start_at);
      shiftDate.setHours(0, 0, 0, 0);
      return shiftDate.getTime() === today.getTime();
    });

    if (!todayShift) {
      return ctx.reply(`
üìÖ *–ù–∞ —Å–µ–≥–æ–¥–Ω—è —Å–º–µ–Ω–∞ –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞*

–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–º–µ–Ω—ã.
      `, { parse_mode: 'Markdown' });
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ —Å–º–µ–Ω—ã
    const workIntervals = await storage.getWorkIntervalsByShift(todayShift.id);
    const breakIntervals = await storage.getBreakIntervalsByShift(todayShift.id);
    
    const activeWork = workIntervals.find(wi => !wi.end_at);
    const activeBreak = breakIntervals.find(bi => !bi.end_at);

    let keyboard: any[] = [];

    if (todayShift.status === 'planned') {
      keyboard = [
        [
          { text: '‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å —Å–º–µ–Ω—É', callback_data: 'start_shift' },
          { text: '‚ùå –ù–µ —Å–º–æ–≥—É –ø—Ä–∏–π—Ç–∏', callback_data: 'absence_planned' }
        ]
      ];
    } else if (todayShift.status === 'active') {
      if (activeBreak) {
        keyboard = [
          [{ text: '‚òëÔ∏è –í–µ—Ä–Ω—É–ª—Å—è', callback_data: 'end_break' }]
        ];
      } else {
        keyboard = [
          [
            { text: 'üçΩ –ù–∞—á–∞—Ç—å –ø–µ—Ä–µ—Ä—ã–≤', callback_data: 'start_break' },
            { text: 'üïî –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–º–µ–Ω—É', callback_data: 'end_shift' }
          ]
        ];
      }
    }

    if (keyboard.length > 0) {
      await ctx.reply(`
üìä *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–º–µ–Ω–æ–π*

‚è∞ *–ü–ª–∞–Ω–∏—Ä—É–µ–º–æ–µ –≤—Ä–µ–º—è:* ${new Date(todayShift.planned_start_at).toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' })} - ${new Date(todayShift.planned_end_at).toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' })}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
      `, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: keyboard
        }
      });
    }

  } catch (error) {
    console.error('Error showing main menu:', error);
    ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}
