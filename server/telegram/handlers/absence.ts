import { Context } from 'telegraf';
import { SessionData } from '../types';
import { storage } from '../../storage';

export async function handleAbsence(ctx: Context & { session: SessionData }) {
  const action = (ctx as any)?.callbackQuery?.data as string | undefined;
  const employeeId = ctx.session.employeeId;
  
  if (!action || !employeeId) {
    return ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
  }

  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å–º–µ–Ω—É
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    const shifts = await storage.getShiftsByEmployee(employeeId);
    const todayShift = shifts.find(s => {
      const shiftDate = new Date(s.planned_start_at);
      shiftDate.setHours(0, 0, 0, 0);
      return shiftDate.getTime() === today.getTime();
    });

    if (!todayShift) {
      return ctx.answerCbQuery('‚ùå –°–º–µ–Ω–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }

    let reason = '';
    let status = '';

    switch (action) {
      case 'absence_planned':
        reason = '–ó–∞–±–ª–∞–≥–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏';
        status = 'planned';
        break;
      case 'absence_sick':
        reason = '–ë–æ–ª–µ–∑–Ω—å';
        status = 'sick';
        break;
      case 'absence_personal':
        reason = '–õ–∏—á–Ω—ã–µ –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞';
        status = 'personal';
        break;
      case 'absence_other':
        reason = '–î—Ä—É–≥–∏–µ –ø—Ä–∏—á–∏–Ω—ã';
        status = 'other';
        break;
      default:
        return ctx.answerCbQuery('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è');
    }

    // –û—Ç–º–µ–Ω—è–µ–º —Å–º–µ–Ω—É
    await storage.updateShift(todayShift.id, {
      status: 'cancelled'
    });

    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏
    await storage.createException({
      employee_id: employeeId,
      date: today.toISOString().split('T')[0],
      kind: 'absence',
      severity: 1,
      details: {
        reason,
        status,
        shift_id: todayShift.id,
        reported_at: new Date().toISOString()
      }
    });

    await ctx.answerCbQuery(`‚úÖ –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ: ${reason}`);

    await ctx.reply(`
üìù *–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ*

üìÖ *–î–∞—Ç–∞:* ${today.toLocaleDateString('ru-RU')}
‚ùå *–ü—Ä–∏—á–∏–Ω–∞:* ${reason}
‚è∞ *–í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:* ${new Date().toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' })}

‚úÖ –í–∞—à–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ –≤ —Å–∏—Å—Ç–µ–º–µ.
–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.

*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/status - –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
/help - –°–ø—Ä–∞–≤–∫–∞
    `, { parse_mode: 'Markdown' });

  } catch (error) {
    console.error('Error handling absence:', error);
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–∫—Å–∞—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è');
  }
}
