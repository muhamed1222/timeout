import { Telegraf, Context, session } from 'telegraf';
import { SessionData } from './types.js';
import { handleStart } from './handlers/start.js';
import { handleShiftActions } from './handlers/shiftActions.js';
import { handleReport } from './handlers/report.js';
import { repositories } from '../repositories/index.js';
import { logger } from '../lib/logger.js';
import { getSecret } from '../lib/secrets.js';

const bot = new Telegraf<Context & { session: SessionData }>(getSecret('TELEGRAM_BOT_TOKEN'));

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Å—Å–∏–π
bot.use(session({
  defaultSession: () => ({})
}));

// Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
bot.use((ctx, next) => {
  const text = (ctx as any)?.message?.text as string | undefined;
  logger.info("Telegram bot message", {
    timestamp: new Date().toISOString(),
    username: ctx.from?.username || 'Unknown',
    message: text || 'Callback'
  });
  return next();
});

// Middleware –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
bot.use(async (ctx, next) => {
  const telegramId = ctx.from?.id?.toString();
  if (!telegramId) {
    return next();
  }

  // –ï—Å–ª–∏ —Å–µ—Å—Å–∏—è –ø—É—Å—Ç–∞—è, –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ø–æ Telegram ID
  if (!ctx.session?.employeeId) {
    try {
      const employee = await repositories.employee.findByTelegramId(telegramId);
      if (employee) {
        logger.info("Auto-restoring session for employee", { employeeId: employee.id });
        ctx.session = {
          employeeId: employee.id,
          companyId: employee.company_id,
          ...ctx.session
        };
      }
    } catch (error) {
      logger.error("Error auto-restoring session", { error });
    }
  }

  return next();
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
bot.start(handleStart);
bot.command('help', (ctx) => {
  ctx.reply(`
ü§ñ *–ë–æ—Ç —É—á—ë—Ç–∞ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏*

*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/status - –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–º–µ–Ω—ã
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

*–û—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:*
‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å —Å–º–µ–Ω—É
üçΩ –ù–∞—á–∞—Ç—å –ø–µ—Ä–µ—Ä—ã–≤  
‚òëÔ∏è –í–µ—Ä–Ω—É–ª—Å—è —Å –ø–µ—Ä–µ—Ä—ã–≤–∞
üïî –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–º–µ–Ω—É

*–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:* –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—é –æ—Ç –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏.
  `, { parse_mode: 'Markdown' });
});

bot.command('status', async (ctx) => {
  const telegramId = ctx.from?.id.toString();
  if (!telegramId) return;

  try {
    const employee = await repositories.employee.findByTelegramId(telegramId);
    if (!employee) {
      return ctx.reply('‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å–º–µ–Ω—É
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    const shifts = await repositories.shift.findByEmployeeId(employee.id);
    const todayShift = shifts.find(s => {
      const shiftDate = new Date(s.planned_start_at);
      shiftDate.setHours(0, 0, 0, 0);
      return shiftDate.getTime() === today.getTime();
    });

    if (!todayShift) {
      return ctx.reply(`
üìÖ *–ù–∞ —Å–µ–≥–æ–¥–Ω—è —Å–º–µ–Ω–∞ –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞*

–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å —Å–º–µ–Ω—É –≤—Ä—É—á–Ω—É—é.

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
      `, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [[
            { text: '‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å —Å–º–µ–Ω—É', callback_data: 'start_shift' }
          ]]
        }
      });
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã —Ä–∞–±–æ—Ç—ã –∏ –ø–µ—Ä–µ—Ä—ã–≤–æ–≤
    const workIntervals = await repositories.shift.findWorkIntervalsByShiftId(todayShift.id);
    const breakIntervals = await repositories.shift.findBreakIntervalsByShiftId(todayShift.id);

    const activeWork = workIntervals.find(wi => !wi.end_at);
    const activeBreak = breakIntervals.find(bi => !bi.end_at);

    let status = 'üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞';
    if (todayShift.status === 'active') {
      status = activeBreak ? 'üçΩ –ü–µ—Ä–µ—Ä—ã–≤' : 'üíº –†–∞–±–æ—Ç–∞—é';
    } else if (todayShift.status === 'completed') {
      status = '‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞';
    }

    let keyboard: any[] = [];
    if (todayShift.status === 'planned') {
      keyboard = [[
        { text: '‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å —Å–º–µ–Ω—É', callback_data: 'start_shift' }
      ]];
    } else if (todayShift.status === 'active') {
      if (activeBreak) {
        keyboard = [[
          { text: '‚òëÔ∏è –í–µ—Ä–Ω—É–ª—Å—è', callback_data: 'end_break' }
        ]];
      } else {
        keyboard = [[
          { text: 'üçΩ –ù–∞—á–∞—Ç—å –ø–µ—Ä–µ—Ä—ã–≤', callback_data: 'start_break' },
          { text: 'üïî –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–º–µ–Ω—É', callback_data: 'end_shift' }
        ]];
      }
    }

    const message = `
üìä *–°—Ç–∞—Ç—É—Å —Å–º–µ–Ω—ã*

üë§ –°–æ—Ç—Ä—É–¥–Ω–∏–∫: ${employee.full_name}
üìÖ –î–∞—Ç–∞: ${today.toLocaleDateString('ru-RU')}
‚è∞ –ü–ª–∞–Ω–∏—Ä—É–µ–º–æ–µ –≤—Ä–µ–º—è: ${new Date(todayShift.planned_start_at).toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' })} - ${new Date(todayShift.planned_end_at).toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' })}
üìà –°—Ç–∞—Ç—É—Å: ${status}

${activeWork ? `‚è± –ù–∞—á–∞–ª —Ä–∞–±–æ—Ç—É: ${new Date(activeWork.start_at).toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' })}` : ''}
${activeBreak ? `üçΩ –ü–µ—Ä–µ—Ä—ã–≤ —Å: ${new Date(activeBreak.start_at).toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' })}` : ''}
    `;

    if (keyboard.length > 0) {
      void ctx.reply(message, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: keyboard
        }
      });
    } else {
      void ctx.reply(message, { parse_mode: 'Markdown' });
    }
  } catch (error) {
    logger.error("Error getting status", { error });
    void ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∫–Ω–æ–ø–æ–∫
bot.action(/^(start_shift|start_break|end_break|end_shift|report_shift)$/, (ctx) => handleShiftActions(ctx));
bot.action(/^report_(.+)$/, (ctx) => handleReport(ctx));

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –æ—Ç—á—ë—Ç–æ–≤)
bot.on('text', async (ctx) => {
  try {
    const session = ctx.session;
    
    if (session?.waitingForReport) {
      await handleReport(ctx, session.waitingForReport);
      session.waitingForReport = undefined;
    } else {
      void ctx.reply('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–º–µ–Ω–æ–π –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.');
    }
  } catch (error) {
    const err = error as any;
    // –õ–æ–≥–∏—Ä—É–µ–º, –Ω–æ –Ω–µ –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–≤–µ—á–∞—Ç—å –ø—Ä–∏ —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–∫–∞—Ö
    if (err.code === 'ERR_SSL_DECRYPTION_FAILED_OR_BAD_RECORD_MAC' ||
        err.code === 'ECONNRESET' ||
        err.code === 'ETIMEDOUT' ||
        err.type === 'system') {
      logger.warn("Network error handling text message", { code: err.code });
      return;
    }
    logger.error("Error handling text message", { error });
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.catch((err: unknown, ctx) => {
  const error = err as any;
  
  // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —Å –¥–µ—Ç–∞–ª—è–º–∏
  logger.error("Bot error", { 
    error: error.message || String(error),
    code: error.code,
    type: error.type,
    errno: error.errno
  });
  
  // –ù–µ –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–≤–µ—á–∞—Ç—å, –µ—Å–ª–∏ —á–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
  if (error.description && error.description.includes('chat not found')) {
    logger.info("Chat not found, skipping reply");
    return;
  }
  
  // –ù–µ –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–≤–µ—á–∞—Ç—å –ø—Ä–∏ SSL/network –æ—à–∏–±–∫–∞—Ö - —ç—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
  if (error.code === 'ERR_SSL_DECRYPTION_FAILED_OR_BAD_RECORD_MAC' ||
      error.code === 'ECONNRESET' ||
      error.code === 'ETIMEDOUT' ||
      error.code === 'ENOTFOUND' ||
      error.type === 'system') {
    logger.warn("Network/SSL error, skipping reply", { code: error.code });
    return;
  }
  
  try {
    void ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
  } catch (replyError) {
    logger.error("Error sending error message", { error: replyError });
  }
});

export { bot };
