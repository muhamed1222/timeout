// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–¥–∞—á —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
import { IQueueJobHandler, QueueJob, QueueJobResult } from '../QueueJob';
import { EmployeeApplicationService } from '../../services/EmployeeApplicationService';
import { DomainException } from '../../../../shared/domain/exceptions/DomainException';

export class NotificationHandler implements IQueueJobHandler {
  constructor(private employeeService: EmployeeApplicationService) {}

  async handle(job: QueueJob): Promise<QueueJobResult> {
    try {
      switch (job.type) {
      case 'SEND_SHIFT_REMINDER':
        return await this.sendShiftReminder(job.payload);
        
      case 'SEND_VIOLATION_NOTIFICATION':
        return await this.sendViolationNotification(job.payload);
        
      case 'SEND_WEEKLY_REPORT':
        return await this.sendWeeklyReport(job.payload);
        
      case 'SEND_EMPLOYEE_WELCOME':
        return await this.sendEmployeeWelcome(job.payload);
        
      default:
        throw new DomainException(`Unknown notification type: ${job.type}`, 'UNKNOWN_NOTIFICATION_TYPE');
      }
    } catch (error) {
      console.error('Error in NotificationHandler:', error);
      return {
        success: false,
        error: error instanceof Error ? error.message : 'Unknown error',
        retry: true
      };
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Å–º–µ–Ω–µ
  private async sendShiftReminder(payload: any): Promise<QueueJobResult> {
    try {
      const { employeeId, shiftId, reminderType } = payload;
      
      if (!employeeId || !shiftId) {
        throw new DomainException('Employee ID and Shift ID are required', 'INVALID_PAYLOAD');
      }

      const employee = await this.employeeService.getEmployeeById(employeeId);
      
      if (!employee) {
        return {
          success: false,
          error: 'Employee not found'
        };
      }

      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å Telegram Bot API
      const message = this.buildShiftReminderMessage(employee.fullName, reminderType);
      
      // –°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      console.log(`Sending shift reminder to ${employee.fullName}: ${message}`);
      
      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –≤—ã–∑–æ–≤ Telegram API
      // await this.telegramService.sendMessage(employee.telegramUserId, message);

      return {
        success: true,
        data: { 
          employeeId,
          message,
          sent: true
        }
      };
    } catch (error) {
      return {
        success: false,
        error: error instanceof Error ? error.message : 'Unknown error'
      };
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞—Ä—É—à–µ–Ω–∏–∏
  private async sendViolationNotification(payload: any): Promise<QueueJobResult> {
    try {
      const { employeeId, violationType, severity, details } = payload;
      
      if (!employeeId || !violationType) {
        throw new DomainException('Employee ID and violation type are required', 'INVALID_PAYLOAD');
      }

      const employee = await this.employeeService.getEmployeeById(employeeId);
      
      if (!employee) {
        return {
          success: false,
          error: 'Employee not found'
        };
      }

      const message = this.buildViolationMessage(employee.fullName, violationType, severity, details);
      
      console.log(`Sending violation notification to ${employee.fullName}: ${message}`);
      
      // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
      await this.notifyAdministrator(employee.companyId.toString(), {
        employeeName: employee.fullName,
        violationType,
        severity,
        details
      });

      return {
        success: true,
        data: { 
          employeeId,
          message,
          sent: true
        }
      };
    } catch (error) {
      return {
        success: false,
        error: error instanceof Error ? error.message : 'Unknown error'
      };
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
  private async sendWeeklyReport(payload: any): Promise<QueueJobResult> {
    try {
      const { companyId, weekStart, weekEnd } = payload;
      
      if (!companyId) {
        throw new DomainException('Company ID is required', 'INVALID_PAYLOAD');
      }

      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –Ω–µ–¥–µ–ª—é
      const employees = await this.employeeService.findByCompanyId(companyId);
      const report = this.buildWeeklyReport(employees, weekStart, weekEnd);
      
      console.log(`Sending weekly report for company ${companyId}:`, report);
      
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∫–æ–º–ø–∞–Ω–∏–∏
      // await this.emailService.sendReport(companyId, report);

      return {
        success: true,
        data: { 
          companyId,
          report,
          sent: true
        }
      };
    } catch (error) {
      return {
        success: false,
        error: error instanceof Error ? error.message : 'Unknown error'
      };
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–æ–≤–æ–º—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É
  private async sendEmployeeWelcome(payload: any): Promise<QueueJobResult> {
    try {
      const { employeeId, inviteCode } = payload;
      
      if (!employeeId) {
        throw new DomainException('Employee ID is required', 'INVALID_PAYLOAD');
      }

      const employee = await this.employeeService.getEmployeeById(employeeId);
      
      if (!employee) {
        return {
          success: false,
          error: 'Employee not found'
        };
      }

      const message = this.buildWelcomeMessage(employee.fullName, inviteCode);
      
      console.log(`Sending welcome message to ${employee.fullName}: ${message}`);
      
      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –≤—ã–∑–æ–≤ Telegram API
      // if (employee.telegramUserId) {
      //   await this.telegramService.sendMessage(employee.telegramUserId, message);
      // }

      return {
        success: true,
        data: { 
          employeeId,
          message,
          sent: true
        }
      };
    } catch (error) {
      return {
        success: false,
        error: error instanceof Error ? error.message : 'Unknown error'
      };
    }
  }

  // –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Å–º–µ–Ω–µ
  private buildShiftReminderMessage(employeeName: string, reminderType: string): string {
    switch (reminderType) {
    case 'start':
      return `–ü—Ä–∏–≤–µ—Ç, ${employeeName}! –ù–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ —á–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –≤–∞—à–∞ —Å–º–µ–Ω–∞.`;
    case 'break':
      return `–ü—Ä–∏–≤–µ—Ç, ${employeeName}! –ù–µ –∑–∞–±—É–¥—å—Ç–µ —Å–¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ—Ä—ã–≤.`;
    case 'end':
      return `–ü—Ä–∏–≤–µ—Ç, ${employeeName}! –ß–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –≤–∞—à–∞ —Å–º–µ–Ω–∞.`;
    default:
      return `–ü—Ä–∏–≤–µ—Ç, ${employeeName}! –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Å–º–µ–Ω–µ.`;
    }
  }

  // –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–∞—Ä—É—à–µ–Ω–∏–∏
  private buildViolationMessage(employeeName: string, violationType: string, severity: number, details: any): string {
    const severityText = severity === 3 ? '–∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ' : severity === 2 ? '—Å–µ—Ä—å–µ–∑–Ω–æ–µ' : '–Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ';
    
    switch (violationType) {
    case 'late_start':
      return `‚ö†Ô∏è ${severityText.toUpperCase()} –Ω–∞—Ä—É—à–µ–Ω–∏–µ: ${employeeName} –æ–ø–æ–∑–¥–∞–ª –Ω–∞ ${details.delayMinutes} –º–∏–Ω—É—Ç.`;
    case 'early_end':
      return `‚ö†Ô∏è ${severityText.toUpperCase()} –Ω–∞—Ä—É—à–µ–Ω–∏–µ: ${employeeName} –∑–∞–≤–µ—Ä—à–∏–ª —Å–º–µ–Ω—É –Ω–∞ ${details.earlyEndMinutes} –º–∏–Ω—É—Ç —Ä–∞–Ω—å—à–µ.`;
    case 'missed_shift':
      return `üö® ${severityText.toUpperCase()} –Ω–∞—Ä—É—à–µ–Ω–∏–µ: ${employeeName} –ø—Ä–æ–ø—É—Å—Ç–∏–ª —Å–º–µ–Ω—É.`;
    case 'long_break':
      return `‚ö†Ô∏è ${severityText.toUpperCase()} –Ω–∞—Ä—É—à–µ–Ω–∏–µ: ${employeeName} —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –ø–µ—Ä–µ—Ä—ã–≤–∞ ${details.workingTime} –º–∏–Ω—É—Ç.`;
    default:
      return `‚ö†Ô∏è ${severityText.toUpperCase()} –Ω–∞—Ä—É—à–µ–Ω–∏–µ: ${employeeName} - ${violationType}.`;
    }
  }

  // –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
  private buildWeeklyReport(employees: any[], weekStart: string, weekEnd: string): any {
    return {
      period: { weekStart, weekEnd },
      totalEmployees: employees.length,
      activeEmployees: employees.filter(emp => emp.status === 'active').length,
      summary: {
        totalShifts: 0, // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ —Å–º–µ–Ω
        completedShifts: 0,
        violations: 0
      }
    };
  }

  // –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
  private buildWelcomeMessage(employeeName: string, inviteCode?: string): string {
    let message = `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥—É, ${employeeName}! üéâ\n\n`;
    message += '–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω. ';
    
    if (inviteCode) {
      message += `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–¥ ${inviteCode} –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram –±–æ—Ç—É.`;
    }
    
    message += '\n\n–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.';
    
    return message;
  }

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
  private async notifyAdministrator(companyId: string, violationData: any): Promise<void> {
    console.log(`Notifying administrator of company ${companyId} about violation:`, violationData);
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∫–æ–º–ø–∞–Ω–∏–∏
  }
}



