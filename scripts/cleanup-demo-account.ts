import 'dotenv/config';
import { drizzle } from 'drizzle-orm/postgres-js';
import postgres from 'postgres';
import { eq, inArray } from 'drizzle-orm';

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ö–µ–º—É –Ω–∞–ø—Ä—è–º—É—é
import { company, employee, shift, daily_report, employee_invite } from '../shared/schema';

const connectionString = process.env.DATABASE_URL;
if (!connectionString) {
  console.error('DATABASE_URL is not set');
  process.exit(1);
}

const client = postgres(connectionString);
const db = drizzle(client);

async function cleanupDemoAccount() {
  try {
    console.log('üîç –ü–æ–∏—Å–∫ demo –∫–æ–º–ø–∞–Ω–∏–∏...');
    
    // –ù–∞–π–¥–µ–º –∫–æ–º–ø–∞–Ω–∏—é –ø–æ –∏–º–µ–Ω–∏ (demo –∫–æ–º–ø–∞–Ω–∏–∏ –æ–±—ã—á–Ω–æ –∏–º–µ—é—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –∏–º–µ–Ω–∞)
    const companies = await db.select().from(company)
      .where(eq(company.name, '–û–û–û –ö–æ–º–ø–∞–Ω–∏—è')); // –ò–ª–∏ –¥—Ä—É–≥–æ–µ –∏–º—è demo –∫–æ–º–ø–∞–Ω–∏–∏
    
    if (companies.length === 0) {
      console.log('‚ùå Demo –∫–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      console.log('üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏:');
      const allCompanies = await db.select().from(company);
      allCompanies.forEach((comp, index) => {
        console.log(`${index + 1}. ${comp.name} (ID: ${comp.id})`);
      });
      return;
    }
    
    const companyData = companies[0];
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–æ–º–ø–∞–Ω–∏—è: ${companyData.name} (ID: ${companyData.id})`);
    
    // –ü–æ–ª—É—á–∏–º –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∫–æ–º–ø–∞–Ω–∏–∏
    const employees = await db.select().from(employee)
      .where(eq(employee.company_id, companyData.id));
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: ${employees.length}`);
    
    if (employees.length === 0) {
      console.log('‚úÖ –°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ—Ç');
      return;
    }
    
    // –ü–æ–∫–∞–∂–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
    console.log('\nüìã –°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:');
    employees.forEach((emp, index) => {
      console.log(`${index + 1}. ${emp.full_name} (${emp.position}) - Telegram: ${emp.telegram_user_id || '–Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω'}`);
    });
    
    // –£–¥–∞–ª–∏–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    console.log('\nüóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
    
    // 1. –£–¥–∞–ª–∏–º –æ—Ç—á–µ—Ç—ã
    const reports = await db.select().from(daily_report)
      .innerJoin(shift, eq(daily_report.shift_id, shift.id))
      .innerJoin(employee, eq(shift.employee_id, employee.id))
      .where(eq(employee.company_id, companyData.id));
    
    if (reports.length > 0) {
      const reportIds = reports.map(r => r.daily_report.id);
      await db.delete(daily_report).where(
        inArray(daily_report.id, reportIds)
      );
      console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ –æ—Ç—á–µ—Ç–æ–≤: ${reports.length}`);
    }
    
    // 2. –£–¥–∞–ª–∏–º —Å–º–µ–Ω—ã
    const shifts = await db.select().from(shift)
      .innerJoin(employee, eq(shift.employee_id, employee.id))
      .where(eq(employee.company_id, companyData.id));
    
    if (shifts.length > 0) {
      const shiftIds = shifts.map(s => s.shift.id);
      await db.delete(shift).where(
        inArray(shift.id, shiftIds)
      );
      console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ —Å–º–µ–Ω: ${shifts.length}`);
    }
    
    // 3. –£–¥–∞–ª–∏–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
    const invites = await db.select().from(employee_invite)
      .where(eq(employee_invite.company_id, companyData.id));
    
    if (invites.length > 0) {
      await db.delete(employee_invite).where(
        eq(employee_invite.company_id, companyData.id)
      );
      console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π: ${invites.length}`);
    }
    
    // 4. –£–¥–∞–ª–∏–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
    await db.delete(employee).where(
      eq(employee.company_id, companyData.id)
    );
    console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: ${employees.length}`);
    
    console.log('\nüéâ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! Demo –∫–æ–º–ø–∞–Ω–∏—è —Ç–µ–ø–µ—Ä—å –ø—É—Å—Ç–∞—è.');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ:', error);
  } finally {
    await client.end();
  }
}

cleanupDemoAccount();
