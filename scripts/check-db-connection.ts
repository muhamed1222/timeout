#!/usr/bin/env tsx
/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: npx tsx scripts/check-db-connection.ts
 */

import postgres from 'postgres';
import { drizzle } from 'drizzle-orm/postgres-js';
import * as schema from '../shared/schema.js';

const connectionString = process.env.DATABASE_URL;

if (!connectionString) {
  console.error('‚ùå DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  console.error('–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
  console.error('export DATABASE_URL="postgresql://..."');
  process.exit(1);
}

async function checkConnection() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...\n');
  
  try {
    const client = postgres(connectionString, {
      ssl: connectionString.includes('supabase') ? { rejectUnauthorized: false } : false,
      max: 1,
      connect_timeout: 10,
      idle_timeout: 20,
    });
    
    const db = drizzle(client, { schema });
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    console.log('1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...');
    await client`SELECT 1`;
    console.log('   ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ\n');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü
    console.log('2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–∞–±–ª–∏—Ü...');
    const tables = await client`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public' 
      AND table_type = 'BASE TABLE'
      ORDER BY table_name;
    `;
    
    const expectedTables = [
      'company',
      'employee',
      'shift',
      'work_interval',
      'break_interval',
      'daily_report',
      'exception',
      'reminder',
      'schedule_template',
      'employee_invite',
      'audit_log',
      'company_violation_rules',
      'violations',
      'employee_rating',
    ];
    
    const foundTables = tables.map(t => t.table_name);
    const missingTables = expectedTables.filter(t => !foundTables.includes(t));
    
    if (missingTables.length > 0) {
      console.log('   ‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ç–∞–±–ª–∏—Ü—ã:', missingTables.join(', '));
      console.log('   üí° –í—ã–ø–æ–ª–Ω–∏—Ç–µ –º–∏–≥—Ä–∞—Ü–∏–∏: npm run db:push\n');
    } else {
      console.log('   ‚úÖ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã –Ω–∞ –º–µ—Å—Ç–µ\n');
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    console.log('3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö...');
    const companies = await db.select().from(schema.company).limit(1);
    
    if (companies.length > 0) {
      console.log(`   ‚úÖ –ù–∞–π–¥–µ–Ω–æ –∫–æ–º–ø–∞–Ω–∏–π: ${companies.length}`);
      console.log(`   üìä –ü—Ä–∏–º–µ—Ä –∫–æ–º–ø–∞–Ω–∏–∏: ${companies[0].name}`);
    } else {
      console.log('   ‚ö†Ô∏è  –¢–∞–±–ª–∏—Ü–∞ company –ø—É—Å—Ç–∞');
      console.log('   üí° –°–æ–∑–¥–∞–π—Ç–µ –∫–æ–º–ø–∞–Ω–∏—é —á–µ—Ä–µ–∑ API –∏–ª–∏ SQL');
    }
    
    console.log('\n‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã!');
    await client.end();
    
  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:');
    console.error(error);
    
    if (error instanceof Error) {
      if (error.message.includes('password authentication failed')) {
        console.error('\nüí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞—Ä–æ–ª—å –≤ DATABASE_URL');
      } else if (error.message.includes('ENOTFOUND') || error.message.includes('getaddrinfo')) {
        console.error('\nüí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ö–æ—Å—Ç –≤ DATABASE_URL');
      } else if (error.message.includes('timeout')) {
        console.error('\nüí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–µ—Ç–µ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ë–î');
      }
    }
    
    process.exit(1);
  }
}

checkConnection();

