#!/usr/bin/env tsx
/**
 * –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –¥–µ–ø–ª–æ—é
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: npx tsx scripts/verify-deployment.ts
 */

import { readFileSync, existsSync } from 'fs';
import { join } from 'path';

console.log('üöÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –¥–µ–ø–ª–æ—é\n');
console.log('='.repeat(50));
console.log('');

// 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤
console.log('1Ô∏è‚É£  –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...');
const vercelJson = existsSync('vercel.json');
const packageJson = existsSync('package.json');

if (vercelJson) {
  console.log('   ‚úÖ vercel.json –Ω–∞–π–¥–µ–Ω');
  try {
    const config = JSON.parse(readFileSync('vercel.json', 'utf-8'));
    if (config.buildCommand) {
      console.log(`   ‚úÖ buildCommand: ${config.buildCommand}`);
    }
    if (config.outputDirectory) {
      console.log(`   ‚úÖ outputDirectory: ${config.outputDirectory}`);
    }
  } catch (e) {
    console.log('   ‚ö†Ô∏è  –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è vercel.json');
  }
} else {
  console.log('   ‚ùå vercel.json –Ω–µ –Ω–∞–π–¥–µ–Ω');
}

if (packageJson) {
  console.log('   ‚úÖ package.json –Ω–∞–π–¥–µ–Ω');
  try {
    const pkg = JSON.parse(readFileSync('package.json', 'utf-8'));
    if (pkg.scripts && pkg.scripts['build:vercel']) {
      console.log(`   ‚úÖ –°–∫—Ä–∏–ø—Ç build:vercel –Ω–∞–π–¥–µ–Ω`);
    }
  } catch (e) {
    console.log('   ‚ö†Ô∏è  –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è package.json');
  }
}

console.log('');

// 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
console.log('2Ô∏è‚É£  –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...');

const envVars = {
  DATABASE_URL: process.env.DATABASE_URL,
  SUPABASE_URL: process.env.SUPABASE_URL,
  SUPABASE_ANON_KEY: process.env.SUPABASE_ANON_KEY,
  SUPABASE_SERVICE_ROLE_KEY: process.env.SUPABASE_SERVICE_ROLE_KEY,
  NODE_ENV: process.env.NODE_ENV || 'development',
};

let envOk = true;
for (const [key, value] of Object.entries(envVars)) {
  if (key === 'NODE_ENV') {
    console.log(`   ${value ? '‚úÖ' : '‚ö†Ô∏è'} ${key}=${value || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'}`);
    continue;
  }
  
  if (value) {
    const masked = key.includes('KEY') || key.includes('TOKEN') || key.includes('PASSWORD')
      ? `${value.substring(0, 15)}...`
      : value;
    console.log(`   ‚úÖ ${key}=${masked}`);
  } else {
    console.log(`   ‚ùå ${key} - –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ`);
    envOk = false;
  }
}

console.log('');

// 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ DATABASE_URL —Ñ–æ—Ä–º–∞—Ç–∞
console.log('3Ô∏è‚É£  –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ DATABASE_URL...');
if (envVars.DATABASE_URL) {
  const dbUrl = envVars.DATABASE_URL;
  if (dbUrl.startsWith('postgresql://')) {
    console.log('   ‚úÖ –§–æ—Ä–º–∞—Ç PostgreSQL –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ Supabase
    if (dbUrl.includes('supabase') || dbUrl.includes('pooler.supabase.com')) {
      console.log('   ‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω Supabase');
      
      if (dbUrl.includes(':6543')) {
        console.log('   ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Connection Pooler (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)');
      }
    }
  } else {
    console.log('   ‚ö†Ô∏è  –ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç DATABASE_URL');
  }
} else {
  console.log('   ‚ö†Ô∏è  DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
}

console.log('');

// 4. –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
console.log('='.repeat(50));
console.log('');

if (envOk && vercelJson && packageJson) {
  console.log('‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã!');
  console.log('');
  console.log('üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
  console.log('   1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ Vercel');
  console.log('      Settings ‚Üí Environment Variables');
  console.log('');
  console.log('   2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è Production –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
  console.log('      - DATABASE_URL');
  console.log('      - SUPABASE_URL');
  console.log('      - SUPABASE_ANON_KEY');
  console.log('      - SUPABASE_SERVICE_ROLE_KEY');
  console.log('      - NODE_ENV=production');
  console.log('');
  console.log('   3. –°–¥–µ–ª–∞–π—Ç–µ Redeploy –≤ Vercel –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö');
  console.log('');
  console.log('   4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–µ–ø–ª–æ—è –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –æ—à–∏–±–æ–∫');
  console.log('');
} else {
  console.log('‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã!');
  console.log('');
  console.log('üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
  if (!envOk) {
    console.log('   - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è');
  }
  if (!vercelJson) {
    console.log('   - –°–æ–∑–¥–∞–π—Ç–µ vercel.json –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
  }
  console.log('');
  process.exit(1);
}

