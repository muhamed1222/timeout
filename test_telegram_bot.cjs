const fetch = require('node-fetch');

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
const testUpdates = [
  {
    name: "–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /start –±–µ–∑ –∏–Ω–≤–∞–π—Ç–∞",
    update: {
      update_id: 1,
      message: {
        message_id: 1,
        from: { id: 123456789, first_name: "Test", username: "testuser" },
        chat: { id: 123456789, type: "private" },
        date: Math.floor(Date.now() / 1000),
        text: "/start"
      }
    }
  },
  {
    name: "–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /start —Å –Ω–µ–≤–µ—Ä–Ω—ã–º –∏–Ω–≤–∞–π—Ç–æ–º",
    update: {
      update_id: 2,
      message: {
        message_id: 2,
        from: { id: 123456789, first_name: "Test", username: "testuser" },
        chat: { id: 123456789, type: "private" },
        date: Math.floor(Date.now() / 1000),
        text: "/start invalid_invite_code"
      }
    }
  },
  {
    name: "–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /help",
    update: {
      update_id: 3,
      message: {
        message_id: 3,
        from: { id: 123456789, first_name: "Test", username: "testuser" },
        chat: { id: 123456789, type: "private" },
        date: Math.floor(Date.now() / 1000),
        text: "/help"
      }
    }
  },
  {
    name: "–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /status",
    update: {
      update_id: 4,
      message: {
        message_id: 4,
        from: { id: 123456789, first_name: "Test", username: "testuser" },
        chat: { id: 123456789, type: "private" },
        date: Math.floor(Date.now() / 1000),
        text: "/status"
      }
    }
  },
  {
    name: "–¢–µ—Å—Ç callback –∫–Ω–æ–ø–∫–∏ start_shift",
    update: {
      update_id: 5,
      callback_query: {
        id: "test_callback_1",
        from: { id: 123456789, first_name: "Test", username: "testuser" },
        message: {
          message_id: 1,
          from: { id: 123456789, first_name: "Test", username: "testuser" },
          chat: { id: 123456789, type: "private" },
          date: Math.floor(Date.now() / 1000),
          text: "Test message"
        },
        data: "start_shift"
      }
    }
  }
];

async function testWebhook(update, testName) {
  try {
    console.log(`\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º: ${testName}`);
    console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º update:`, JSON.stringify(update, null, 2));
    
    const response = await fetch('http://localhost:3001/api/telegram/webhook', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(update)
    });
    
    const result = await response.text();
    console.log(`üì• –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: ${response.status} - ${result}`);
    
    if (response.ok) {
      console.log('‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω');
    } else {
      console.log('‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω');
    }
    
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: ${error.message}`);
  }
}

async function runTests() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ Telegram –±–æ—Ç–∞...\n');
  
  // –ñ–¥–µ–º, –ø–æ–∫–∞ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è
  console.log('‚è≥ –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...');
  await new Promise(resolve => setTimeout(resolve, 3000));
  
  for (const test of testUpdates) {
    await testWebhook(test.update, test.name);
    await new Promise(resolve => setTimeout(resolve, 1000)); // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
  }
  
  console.log('\nüèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
}

runTests().catch(console.error);
