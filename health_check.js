// –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
// –ó–∞–ø—É—Å–∫: node health_check.js

const SITE_URL = 'https://timeout-lac.vercel.app';

async function checkSiteHealth() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∞–π—Ç–∞...\n');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    console.log('üì° –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–∞–π—Ç–∞...');
    const siteResponse = await fetch(SITE_URL);
    console.log(`   –°—Ç–∞—Ç—É—Å: ${siteResponse.status} ${siteResponse.statusText}`);
    
    if (siteResponse.status === 200) {
      console.log('   ‚úÖ –°–∞–π—Ç –¥–æ—Å—Ç—É–ø–µ–Ω');
    } else {
      console.log('   ‚ùå –°–∞–π—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
      return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ API
    console.log('\nüì° –ü—Ä–æ–≤–µ—Ä–∫–∞ API endpoints...');
    
    const apiEndpoints = [
      '/api/companies',
      '/api/employees',
      '/api/auth/register'
    ];
    
    let allApiOk = true;
    
    for (const endpoint of apiEndpoints) {
      try {
        const response = await fetch(`${SITE_URL}${endpoint}`, {
          method: 'OPTIONS' // –ò—Å–ø–æ–ª—å–∑—É–µ–º OPTIONS —á—Ç–æ–±—ã –Ω–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ
        });
        
        console.log(`   ${endpoint}: ${response.status} ${response.statusText}`);
        
        if (response.status >= 500) {
          allApiOk = false;
        }
      } catch (error) {
        console.log(`   ${endpoint}: ‚ùå –û—à–∏–±–∫–∞ - ${error.message}`);
        allApiOk = false;
      }
    }
    
    if (allApiOk) {
      console.log('   ‚úÖ –í—Å–µ API endpoints –¥–æ—Å—Ç—É–ø–Ω—ã');
    } else {
      console.log('   ‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ API endpoints –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
    }
    
    return siteResponse.status === 200 && allApiOk;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–∞–π—Ç–∞:', error.message);
    return false;
  }
}

async function checkEnvironment() {
  console.log('\n\nüîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...\n');
  
  const requiredVars = [
    'SUPABASE_URL',
    'SUPABASE_SERVICE_ROLE_KEY',
    'DATABASE_URL'
  ];
  
  let allEnvOk = true;
  
  for (const varName of requiredVars) {
    if (process.env[varName]) {
      console.log(`   ${varName}: ‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞`);
    } else {
      console.log(`   ${varName}: ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`);
      allEnvOk = false;
    }
  }
  
  return allEnvOk;
}

async function main() {
  console.log(`üöÄ Health Check –¥–ª—è ${SITE_URL}\n`);
  console.log('=' .repeat(50));
  
  const siteOk = await checkSiteHealth();
  const envOk = await checkEnvironment();
  
  console.log('\n' + '=' .repeat(50));
  console.log('üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–û–í–ï–†–ö–ò:');
  
  if (siteOk) {
    console.log('‚úÖ –°–∞–π—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
  } else {
    console.log('‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å—é —Å–∞–π—Ç–∞');
  }
  
  if (envOk) {
    console.log('‚úÖ –í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
  } else {
    console.log('‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç');
  }
  
  if (siteOk && envOk) {
    console.log('\nüéâ –ü—Ä–æ–µ–∫—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∏—Å–ø—Ä–∞–≤–Ω–æ!');
    console.log('üí° –ì–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ');
  } else {
    console.log('\nüîß –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞');
  }
}

main().catch(console.error);