// –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
// –ó–∞–ø—É—Å–∫: node test_registration.js

const API_BASE = 'https://timeout-lac.vercel.app';

async function testRegistration() {
  console.log('üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏...\n');
  
  // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
  const testData = {
    email: `test-${Date.now()}@example.com`,
    password: 'TestPassword123!',
    company_name: '–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–ø–∞–Ω–∏—è',
    full_name: '–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
  };
  
  console.log('üìù –û—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ:');
  console.log(JSON.stringify(testData, null, 2));
  
  try {
    console.log('\nüì° –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é...');
    
    const response = await fetch(`${API_BASE}/api/auth/register`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(testData)
    });
    
    const status = response.status;
    const statusText = response.statusText;
    
    console.log(`üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${status} ${statusText}`);
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞
    const responseBody = await response.text();
    let jsonData = null;
    
    try {
      jsonData = JSON.parse(responseBody);
      console.log('üì¶ –û—Ç–≤–µ—Ç (JSON):');
      console.log(JSON.stringify(jsonData, null, 2));
    } catch (e) {
      console.log('üìÑ –û—Ç–≤–µ—Ç (—Ç–µ–∫—Å—Ç):');
      console.log(responseBody.substring(0, 500) + (responseBody.length > 500 ? '...' : ''));
    }
    
    // –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    if (status === 200) {
      console.log('\n‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!');
      console.log('üí° –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:');
      console.log(`   Email: ${testData.email}`);
      console.log(`   –ü–∞—Ä–æ–ª—å: ${testData.password}`);
      
      if (jsonData && jsonData.company_id) {
        console.log(`   Company ID: ${jsonData.company_id}`);
      }
      
    } else if (status === 400) {
      console.log('\n‚ö†Ô∏è  –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö');
      if (jsonData && jsonData.error) {
        console.log(`   –°–æ–æ–±—â–µ–Ω–∏–µ: ${jsonData.error}`);
      }
      
    } else if (status === 500) {
      console.log('\n‚ùå –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ (500)');
      console.log('üîß –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
      console.log('   - –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
      console.log('   - –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è');
      console.log('   - –û—à–∏–±–∫–∏ –≤ –∫–æ–¥–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
      
    } else {
      console.log(`\n‚ùì –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: ${status}`);
    }
    
  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞:', error.message);
    console.log('üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:');
    console.log('   - –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–∞–π—Ç–∞');
    console.log('   - –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å URL');
    console.log('   - –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É');
  }
}

// –¢–µ—Å—Ç –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É
async function testLogin() {
  console.log('\n\nüîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥–∞...\n');
  
  // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç –≤—Ö–æ–¥–∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
  console.log('üí° –ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ–π—Ç–∏ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å–∞–π—Ç–∞');
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  console.log(`üìç –¢–µ—Å—Ç–∏—Ä—É–µ–º API: ${API_BASE}`);
  
  await testRegistration();
  await testLogin();
  
  console.log('\nüèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
}

main().catch(console.error);