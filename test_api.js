// –¢–µ—Å—Ç API endpoints
// –ó–∞–ø—É—Å–∫: node test_api.js

const API_BASE = 'https://timeout-ci9enz2qx-outtime.vercel.app'

async function testEndpoint(path, description) {
  try {
    console.log(`\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º: ${description}`)
    console.log(`üîó URL: ${API_BASE}${path}`)
    
    const response = await fetch(`${API_BASE}${path}`)
    const status = response.status
    const contentType = response.headers.get('content-type')
    
    console.log(`üìä –°—Ç–∞—Ç—É—Å: ${status} ${response.statusText}`)
    console.log(`üìÑ –¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞: ${contentType}`)
    
    if (status === 200) {
      if (contentType && contentType.includes('application/json')) {
        const data = await response.json()
        console.log('‚úÖ –£—Å–ø–µ—Ö! –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ JSON')
        console.log('üì¶ –î–∞–Ω–Ω—ã–µ:', JSON.stringify(data, null, 2).slice(0, 200) + '...')
      } else {
        const text = await response.text()
        console.log('‚ö†Ô∏è  –ü–æ–ª—É—á–µ–Ω HTML –≤–º–µ—Å—Ç–æ JSON')
        console.log('üìÑ –ü–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤:', text.slice(0, 200))
      }
    } else if (status === 401) {
      console.log('üîí –¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è (Vercel Protection)')
    } else if (status === 404) {
      console.log('‚ùå Endpoint –Ω–µ –Ω–∞–π–¥–µ–Ω')
    } else {
      console.log(`‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: ${status}`)
    }
    
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ ${description}:`, error.message)
  }
}

async function runTests() {
  console.log('üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API endpoints...')
  
  await testEndpoint('/api/companies', '–°–ø–∏—Å–æ–∫ –∫–æ–º–ø–∞–Ω–∏–π')
  await testEndpoint('/api/employees', '–°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤')
  await testEndpoint('/', '–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞')
  
  console.log('\nüèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ')
}

runTests()