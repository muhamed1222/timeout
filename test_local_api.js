// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ API
// –ó–∞–ø—É—Å–∫: node test_local_api.js

async function testApi() {
  console.log('üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ API...\n');
  
  try {
    // –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ–º–ø–∞–Ω–∏–π
    console.log('üì° –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ–º–ø–∞–Ω–∏–π');
    const companiesResponse = await fetch('http://localhost:3001/api/companies');
    console.log(`   –°—Ç–∞—Ç—É—Å: ${companiesResponse.status} ${companiesResponse.statusText}`);
    
    if (companiesResponse.status === 200) {
      const companies = await companiesResponse.json();
      console.log(`   –†–µ–∑—É–ª—å—Ç–∞—Ç: ${Array.isArray(companies) ? `–ü–æ–ª—É—á–µ–Ω–æ ${companies.length} –∫–æ–º–ø–∞–Ω–∏–π` : '–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã'}`);
    }
    
    // –¢–µ—Å—Ç 2: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
    console.log('\nüì° –¢–µ—Å—Ç 2: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
    const registerData = {
      email: `test-${Date.now()}@example.com`,
      password: 'TestPassword123!',
      company_name: '–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–ø–∞–Ω–∏—è',
      full_name: '–¢–µ—Å—Ç–æ–≤—ã–π –ê–¥–º–∏–Ω'
    };
    
    const registerResponse = await fetch('http://localhost:3001/api/auth/register', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(registerData)
    });
    
    console.log(`   –°—Ç–∞—Ç—É—Å: ${registerResponse.status} ${registerResponse.statusText}`);
    
    if (registerResponse.status === 200) {
      const result = await registerResponse.json();
      console.log('   ‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!');
      console.log(`   Company ID: ${result.company_id}`);
    } else {
      const error = await registerResponse.text();
      console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${error}`);
    }
    
    // –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å companyId)
    console.log('\nüì° –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–º–ø–∞–Ω–∏–∏');
    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–ø–∞–Ω–∏–π
    const companiesResp = await fetch('http://localhost:3001/api/companies');
    if (companiesResp.status === 200) {
      const companies = await companiesResp.json();
      if (companies.length > 0) {
        const companyId = companies[0].id;
        const statsResponse = await fetch(`http://localhost:3001/api/companies/${companyId}/stats`);
        console.log(`   –°—Ç–∞—Ç—É—Å: ${statsResponse.status} ${statsResponse.statusText}`);
        
        if (statsResponse.status === 200) {
          const stats = await statsResponse.json();
          console.log('   ‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞:');
          console.log(`      –í—Å–µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: ${stats.totalEmployees}`);
          console.log(`      –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–º–µ–Ω: ${stats.activeShifts}`);
        }
      } else {
        console.log('   ‚ö†Ô∏è  –ù–µ—Ç –∫–æ–º–ø–∞–Ω–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
      }
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ API:', error.message);
  }
  
  console.log('\nüèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
}

testApi().catch(console.error);